- markers   = true unless local_assigns.has_key?(:markers)
- tags      = [] unless local_assigns.has_key?(:tags)
- color     = location_color(location) unless local_assigns.has_key?(:color)
- zoom      = 0 unless local_assigns.has_key?(:zoom)
- features  = location_features(location) unless local_assigns.has_key?(:features)
- klasses   = []
- klasses.push("mappable") if location.mappable?

.unselected.span-10.last{:id => "mappable_#{index}", :class => klasses.join, :lat => location.lat, :lng => location.lng, :index => index, :color => color, :zoom => zoom, |
                         :html => "<strong>#{link_to location.company_name, location_path(location)}</strong><br />#{[location.street_address, city_state_zip(location.city, location.state, location.zip)].reject(&:blank?).join("<br/>")}"} |
  - if markers and location.mappable?
    .span-1.icon-div
      -# explicit link here to prevent asset timestamp, so the url looks exactly like the js generated one in map_markers
      %img{:src => google_marker(color, index), :width => google_marker_width, :height => google_marker_height}
      -#= image_tag(google_marker(color, index), :size => google_marker_size)
  - else
    -# marker icon placeholder
    .span-1== &nbsp;

  -# cache location info, independent of its list index
  - cache("#{location.cache_key}", :expires_in => CacheExpire.locations) do
    .span-9.last.info
      .span-9.last
        %h4.name.margin-bottom-5
          = link_to location.company_name, location_path(location), :class => "#{features.join(" ")} name"
      .span-9.last
        .span-6.address
          %span.address.margin-bottom-5{:style => 'color: #555;'}
            = [location.street_address, city_state_zip(location.city, location.state, location.zip)].reject(&:blank?).join("<br/>")
        .span-3.last.phone
          - unless location.phone_numbers_count == 0
            %span.phone{:style => "margin-left: 17px;"}= number_to_phone(location.primary_phone_number.address, :delimiter => ".")
      .span-9.last.nearby
        - if location.mappable? and !tags.empty?
          -# search nearby locations with specific tags
          %span{:style => 'color: #999; font-size: 0.9em;'}
            == Search nearby:
            - tags.slice(0,2).each do |tag|
              = link_to tag.name, url_for(:state => location.state, :city => location.city, :lat => location.lat.to_url_param, :lng => location.lng.to_url_param, :street => location.street_address.to_url_param, :tag => tag.name.to_url_param), :class => 'tag nearby'