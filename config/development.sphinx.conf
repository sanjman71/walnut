indexer
{
}

searchd
{
  address = 127.0.0.1
  port = 3312
  log = /Users/sanjay/Rails/walnut/log/searchd.log
  query_log = /Users/sanjay/Rails/walnut/log/searchd.query.log
  pid_file = /Users/sanjay/Rails/walnut/log/searchd.development.pid
}

source location_core_0
{
  type = mysql
  sql_host = localhost
  sql_user = rails
  sql_pass = rails
  sql_db = walnut_development
  sql_port = 3306
  sql_query_pre = SET NAMES utf8
  sql_query = SELECT `locations`.`id` * 1 + 0 AS `id` , CAST(`locations`.`name` AS CHAR) AS `name`, CAST(`locations`.`street_address` AS CHAR) AS `street_address`, CAST(GROUP_CONCAT(`tags`.`name` SEPARATOR ' ') AS CHAR) AS `locality_tags`, CAST(GROUP_CONCAT(`place_tags_locations`.`name` SEPARATOR ' ') AS CHAR) AS `place_tags`, `locations`.`id` AS `sphinx_internal_id`, 2817059741 AS `class_crc`, '2817059741' AS `subclass_crcs`, 0 AS `sphinx_deleted` FROM locations    LEFT OUTER JOIN `taggings` ON (`locations`.`id` = `taggings`.`taggable_id` AND `taggings`.`taggable_type` = 'Location')  LEFT OUTER JOIN `tags` ON (`tags`.`id` = `taggings`.`tag_id`) AND taggings.context = 'locality_tags'   LEFT OUTER JOIN `taggings` place_tags_locations_join ON (`locations`.`id` = `place_tags_locations_join`.`taggable_id` AND `place_tags_locations_join`.`taggable_type` = 'Location')  LEFT OUTER JOIN `tags` place_tags_locations ON (`place_tags_locations`.`id` = `place_tags_locations_join`.`tag_id`) AND taggings.context = 'place_tags'  WHERE `locations`.`id` >= $start   AND `locations`.`id` <= $end    GROUP BY `locations`.`id`  ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`id`), 1), IFNULL(MAX(`id`), 1) FROM `locations` 
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = class_crc
  sql_attr_uint = sphinx_deleted
  sql_attr_multi = uint subclass_crcs from field
  sql_query_info = SELECT * FROM `locations` WHERE  `id` = (($id - 0) / 1)
}

index location_core
{
  source = location_core_0
  path = /Users/sanjay/Rails/walnut/db/sphinx/development/location_core
  morphology = stem_en
  charset_type = utf-8
}

index location
{
  type = distributed
  local = location_core
}
